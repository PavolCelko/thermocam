#!/usr/bin/python

from PIL import Image
import numpy as np

import cv2
import numpy as np
import os
 
from os.path import isfile, join

sviecka_offline = [22, 21, 24, 23, 21, 21, 22, 21, 20, 20, 24, 24, 25, 24, 23, 21, 20, 20, 21, 21, 20, 21, 23, 22, 21, 21, 25, 25, 25, 26, 28, 27, 22, 22, 23, 22, 21, 21, 21, 20, 20, 20, 21, 22, 24, 24, 22, 21, 20, 20, 21, 20, 21, 21, 22, 21, 21, 21, 24, 24, 26, 26, 27, 26, 21, 21, 24, 22, 21, 21, 22, 21, 20, 20, 23, 24, 26, 26, 24, 22, 20, 20, 22, 21, 20, 20, 22, 22, 21, 21, 24, 24, 25, 25, 29, 27, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 22, 22, 26, 26, 24, 21, 21, 20, 21, 20, 20, 20, 21, 20, 21, 21, 22, 22, 25, 26, 27, 27, 22, 22, 24, 23, 21, 21, 22, 21, 20, 20, 22, 23, 27, 29, 27, 24, 20, 20, 22, 21, 20, 20, 22, 21, 20, 20, 23, 23, 25, 26, 28, 27, 22, 22, 22, 22, 21, 21, 21, 20, 20, 20, 21, 22, 27, 28, 26, 23, 20, 20, 21, 20, 20, 20, 20, 20, 20, 20, 21, 23, 25, 26, 27, 27, 22, 22, 24, 22, 21, 21, 22, 21, 20, 20, 22, 22, 27, 31, 33, 28, 21, 21, 22, 21, 20, 20, 22, 20, 19, 20, 22, 23, 25, 26, 29, 27, 22, 22, 23, 22, 21, 21, 21, 20, 20, 20, 21, 22, 29, 31, 29, 25, 21, 21, 21, 20, 20, 20, 21, 20, 20, 20, 21, 22, 25, 26, 27, 26, 22, 22, 23, 23, 21, 21, 23, 21, 20, 20, 22, 21, 26, 32, 41, 35, 22, 21, 22, 21, 20, 20, 22, 21, 19, 19, 23, 24, 24, 25, 27, 27, 22, 23, 22, 22, 21, 21, 22, 20, 20, 20, 21, 21, 30, 35, 36, 30, 22, 21, 21, 20, 20, 20, 21, 20, 20, 20, 22, 23, 25, 26, 26, 26, 22, 22, 23, 23, 21, 21, 23, 21, 20, 20, 22, 21, 25, 32, 51, 48, 26, 23, 23, 21, 20, 20, 22, 21, 20, 20, 23, 24, 25, 26, 27, 27, 22, 22, 22, 22, 21, 21, 21, 20, 20, 20, 21, 21, 31, 39, 48, 40, 23, 22, 21, 20, 20, 20, 20, 20, 20, 20, 22, 23, 26, 26, 27, 26, 22, 21, 23, 22, 21, 21, 22, 21, 20, 20, 22, 21, 24, 30, 66, 71, 41, 28, 23, 21, 20, 20, 21, 20, 20, 20, 23, 24, 25, 25, 27, 26, 22, 22, 22, 21, 21, 21, 21, 21, 20, 20, 20, 21, 31, 44, 70, 62, 28, 23, 22, 21, 20, 20, 21, 20, 21, 21, 22, 23, 25, 25, 27, 26, 22, 21, 23, 22, 21, 21, 22, 22, 20, 20, 22, 22, 23, 29, 96, 127, 103, 66, 29, 28, 25, 24, 24, 23, 22, 21, 23, 23, 25, 25, 28, 27, 22, 22, 22, 21, 21, 22, 21, 21, 20, 20, 21, 21, 31, 50, 131, 134, 51, 34, 26, 25, 24, 24, 23, 22, 21, 21, 21, 23, 25, 26, 27, 26, 22, 21, 23, 22, 21, 21, 22, 22, 20, 20, 23, 26, 44, 52, 124, 174, 183, 146, 76, 65, 48, 41, 29, 27, 25, 25, 26, 25, 25, 26, 28, 27, 22, 22, 22, 22, 22, 21, 21, 21, 20, 21, 30, 38, 59, 75, 185, 202, 127, 96, 60, 53, 36, 31, 27, 26, 25, 25, 25, 25, 25, 26, 27, 26, 22, 21, 23, 22, 22, 22, 25, 24, 23, 24, 27, 27, 26, 27, 32, 35, 34, 31, 30, 29, 27, 27, 28, 27, 25, 24, 26, 25, 24, 24, 27, 27, 22, 22, 22, 22, 23, 23, 24, 23, 25, 25, 27, 27, 28, 29, 37, 38, 32, 31, 29, 28, 27, 27, 26, 25, 24, 25, 25, 24, 25, 25, 27, 26, 22, 21, 24, 22, 22, 22, 25, 24, 24, 24, 27, 27, 26, 26, 27, 27, 26, 26, 29, 28, 27, 27, 27, 26, 24, 24, 26, 25, 24, 24, 27, 27, 22, 23, 23, 22, 23, 24, 25, 24, 25, 26, 26, 27, 27, 27, 27, 26, 27, 28, 28, 27, 27, 26, 25, 25, 25, 25, 25, 24, 24, 25, 27, 26, 22, 22, 25, 25, 24, 24, 25, 25, 24, 24, 26, 25, 24, 25, 27, 26, 25, 25, 26, 26, 24, 24, 26, 25, 24, 24, 26, 25, 24, 24, 27, 26, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 25, 25, 25, 24, 25, 25, 25, 24, 25, 25, 25, 24, 25, 26, 27, 25]

RED_HEAT_PALLETE = [0,3,6,8,11,14,17,19,22,25,27,30,33,35,38,41,43,46,48,51,53,56,58,61,63,66,68,71,73,75,78,80,82,85,87,89,92,94,96,98,101,103,105,107,109,111,114,116,118,120,122,124,126,128,130,132,134,136,138,140,141,143,145,147,149,151,153,154,156,158,160,161,163,165,166,168,170,171,173,174,176,178,179,181,182,184,185,187,188,190,191,192,194,195,197,198,199,201,202,203,204,206,207,208,209,211,212,213,214,215,216,217,218,219,221,222,223,224,225,226,226,227,228,229,230,231,232,233,234,234,235,236,237,237,238,239,240,240,241,242,242,243,243,244,245,245,246,246,247,247,248,248,249,249,250,250,250,251,251,251,252,252,252,253,253,253,253,254,254,254,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,251,250,250,249,249,249,248,248,247,247,246,246,245,244,244,243,243,242,241,241,240,239,239,238,237,236,236,235,234,233,232,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,212,211]
GREEN_HEAT_PALLETE = [0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,4,4,4,5,5,6,6,7,7,8,9,9,10,10,11,12,12,13,14,15,15,16,17,18,18,19,20,21,22,23,24,25,26,27,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,50,51,52,53,54,56,57,58,60,61,62,63,65,66,67,69,70,72,73,74,76,77,78,80,81,83,84,85,87,88,90,91,93,94,96,97,98,100,101,103,104,106,107,109,110,112,113,115,116,118,119,121,122,124,125,127,128,130,131,133,134,136,137,139,140,142,143,145,146,148,149,151,152,154,155,157,158,159,161,162,164,165,167,168,170,171,172,174,175,177,178,179,181,182,183,185,186,188,189,190,192,193,194,195,197,198,199,201,202,203,204,205,207,208,209,210,211,213,214,215,216,217,218,219,220,221,222,224,225,226,227,228,228,229,230,231,232,233,234,235,236,237,237,238,239,240,240,241,242,243,243,244,245,245,246,246,247,248,248,249,249,250,250,251,251,251,252,252,252,253,253,253,254,254,254,254,254,255,255,255,255,255,255,255]
BLUE_HEAT_PALLETE = [0,8,16,23,31,38,45,52,59,66,72,79,85,91,97,103,109,115,120,125,131,136,141,145,150,155,159,164,168,172,176,180,183,187,191,194,197,201,204,207,210,212,215,218,220,223,225,227,229,231,233,235,237,238,240,241,243,244,245,247,248,249,250,250,251,252,253,253,254,254,254,255,255,255,255,255,255,255,255,254,254,254,253,253,252,252,251,251,250,249,248,247,246,246,245,243,242,241,240,239,238,236,235,234,232,231,229,228,226,225,223,222,220,218,217,215,213,211,209,208,206,204,202,200,198,196,194,192,190,188,186,184,182,180,178,176,174,172,170,167,165,163,161,159,157,154,152,150,148,146,144,141,139,137,135,133,131,128,126,124,122,120,118,115,113,111,109,107,105,103,101,99,97,95,93,91,89,87,85,83,81,79,77,75,73,71,69,67,66,64,62,60,58,57,55,53,52,50,48,47,45,44,42,41,39,38,36,35,33,32,31,29,28,27,26,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,10,9,8,8,7,6,6,5,5,4,4,3,3,2,2,2,1,1,1,1,0,0,0,0,0,0]

# heat color pallete
pallete =   {
                'red' : RED_HEAT_PALLETE, 
                'green':GREEN_HEAT_PALLETE, 
                'blue':BLUE_HEAT_PALLETE
            }

MIN_temp = -40
MAX_temp = -300
UPSCALE_FACTOR = 20
 
def convert_frames_to_video(pathIn, pathOut, fps):
    frame_array = []
    files = [f for f in os.listdir(pathIn) if isfile(join(pathIn, f))]
 
    #for sorting the file names properly
    # files.sort(key = lambda x: int(x[5:-4]))
 
    for i in range(len(files)):
        filename = pathIn + files[i]
        #reading each files
        img = cv2.imread(filename)
        height, width, layers = img.shape
        size = (width,height)
        print(filename)
        #inserting the frames into an image array
        frame_array.append(img)
 
    out = cv2.VideoWriter(pathOut, cv2.VideoWriter_fourcc(*'DIVX'), fps, size)
 
    for i in range(len(frame_array)):
        # writing to a image array
        out.write(frame_array[i])
    out.release()
 

def list_to_image(img_number, sviecka=sviecka_offline):
    h = 24 * UPSCALE_FACTOR
    w = 32 * UPSCALE_FACTOR
    data = np.zeros((h, w, 3), dtype=np.uint8)

    spread_sviecka = []
    for i in sviecka:
        # print(i)
        spread_sviecka.append(int(255 / float(max(sviecka) - min(sviecka)) * i - min(sviecka) * 255 / float(max(sviecka) - min(sviecka))))
    
    # convering sviecka from list into array
    sviecka_ll = []
    for i in range(24):
        sviecka_ll.append(spread_sviecka[i * 32 : (i + 1) * 32])
    for i in range(len(sviecka_ll)):        
        for j in range(len(sviecka_ll[i])):
            # sviecka_ll[i][j] = [sviecka_ll[i][j], sviecka_ll[i][j], sviecka_ll[i][j]]
            # sviecka_ll[i][j] = [pallete[0][sviecka_ll[i][j]], pallete[1][sviecka_ll[i][j]], pallete[2][sviecka_ll[i][j]]]
            sviecka_ll[i][j] = [pallete['red'][sviecka_ll[i][j]], pallete['green'][sviecka_ll[i][j]], pallete['blue'][sviecka_ll[i][j]]]
    array_sviecka = np.array(sviecka_ll, dtype=np.uint8)
    
    img_orig = Image.fromarray(array_sviecka, 'RGB')
    
    # img = img_orig.resize((w, h), Image.NEAREST)
    # img.save('server/sviecka_nearest.jpg')
    
    # img = img_orig.resize((w, h), Image.ANTIALIAS)
    # img.save('server/sviecka_antial.jpg')
    
    # img = img_orig.resize((w, h), Image.BILINEAR)
    # img.save('server/sviecka_bilinear.jpg')
    
    # img = img_orig.resize((w, h), Image.BICUBIC)
    # img.save('server/sviecka_bicubic.jpg')
    
    # img = img_orig.resize((w, h), Image.LANCZOS)
    # img.save('server/sviecka_lanczos.jpg')

    img = img_orig.resize((w, h), Image.BICUBIC)
    img.save('images/img_' + '{:02d}'.format(int(img_number)) + '.jpg')

    # pathIn= './images/'
    # pathOut = 'video.avi'
    # fps = 2.0
    # convert_frames_to_video(pathIn, pathOut, fps)

def print_temp_integer_map(temp_list):
    for i in range(0, len(temp_list), 32):
        if type(temp_list[2]) is float:
            print("{:02d}:"
            "{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|"
            "{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}|{:03.1f}". 
            format(int(i/32), * temp_list[i:(i + 32)]))
        elif type(temp_list[2]) is int:
            print("{:02d}:"
            "{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|"
            "{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}|{:03d}". 
            format(int(i/32), * temp_list[i:(i + 32)]))
        else:
            print("NOTHING to print!")
